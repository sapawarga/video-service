// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sapawarga/video-service/model"
)

// MockDatabaseI is a mock of DatabaseI interface.
type MockDatabaseI struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseIMockRecorder
}

// MockDatabaseIMockRecorder is the mock recorder for MockDatabaseI.
type MockDatabaseIMockRecorder struct {
	mock *MockDatabaseI
}

// NewMockDatabaseI creates a new mock instance.
func NewMockDatabaseI(ctrl *gomock.Controller) *MockDatabaseI {
	mock := &MockDatabaseI{ctrl: ctrl}
	mock.recorder = &MockDatabaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseI) EXPECT() *MockDatabaseIMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDatabaseI) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabaseIMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabaseI)(nil).Delete), ctx, id)
}

// GetCategoryNameByID mocks base method.
func (m *MockDatabaseI) GetCategoryNameByID(ctx context.Context, id int64) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryNameByID", ctx, id)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryNameByID indicates an expected call of GetCategoryNameByID.
func (mr *MockDatabaseIMockRecorder) GetCategoryNameByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryNameByID", reflect.TypeOf((*MockDatabaseI)(nil).GetCategoryNameByID), ctx, id)
}

// GetDetailVideo mocks base method.
func (m *MockDatabaseI) GetDetailVideo(ctx context.Context, id int64) (*model.VideoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailVideo", ctx, id)
	ret0, _ := ret[0].(*model.VideoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailVideo indicates an expected call of GetDetailVideo.
func (mr *MockDatabaseIMockRecorder) GetDetailVideo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailVideo", reflect.TypeOf((*MockDatabaseI)(nil).GetDetailVideo), ctx, id)
}

// GetListVideo mocks base method.
func (m *MockDatabaseI) GetListVideo(ctx context.Context, req *model.GetListVideoRepoRequest) ([]*model.VideoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListVideo", ctx, req)
	ret0, _ := ret[0].([]*model.VideoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListVideo indicates an expected call of GetListVideo.
func (mr *MockDatabaseIMockRecorder) GetListVideo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListVideo", reflect.TypeOf((*MockDatabaseI)(nil).GetListVideo), ctx, req)
}

// GetLocationByID mocks base method.
func (m *MockDatabaseI) GetLocationByID(ctx context.Context, id int64) (*model.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationByID", ctx, id)
	ret0, _ := ret[0].(*model.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByID indicates an expected call of GetLocationByID.
func (mr *MockDatabaseIMockRecorder) GetLocationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByID", reflect.TypeOf((*MockDatabaseI)(nil).GetLocationByID), ctx, id)
}

// GetMetadataVideo mocks base method.
func (m *MockDatabaseI) GetMetadataVideo(ctx context.Context, req *model.GetListVideoRepoRequest) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataVideo", ctx, req)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataVideo indicates an expected call of GetMetadataVideo.
func (mr *MockDatabaseIMockRecorder) GetMetadataVideo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataVideo", reflect.TypeOf((*MockDatabaseI)(nil).GetMetadataVideo), ctx, req)
}

// GetVideoStatistic mocks base method.
func (m *MockDatabaseI) GetVideoStatistic(ctx context.Context) ([]*model.VideoStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoStatistic", ctx)
	ret0, _ := ret[0].([]*model.VideoStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoStatistic indicates an expected call of GetVideoStatistic.
func (mr *MockDatabaseIMockRecorder) GetVideoStatistic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoStatistic", reflect.TypeOf((*MockDatabaseI)(nil).GetVideoStatistic), ctx)
}

// HealthCheckReadiness mocks base method.
func (m *MockDatabaseI) HealthCheckReadiness(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheckReadiness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheckReadiness indicates an expected call of HealthCheckReadiness.
func (mr *MockDatabaseIMockRecorder) HealthCheckReadiness(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheckReadiness", reflect.TypeOf((*MockDatabaseI)(nil).HealthCheckReadiness), ctx)
}

// Insert mocks base method.
func (m *MockDatabaseI) Insert(ctx context.Context, params *model.CreateVideoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDatabaseIMockRecorder) Insert(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabaseI)(nil).Insert), ctx, params)
}

// Update mocks base method.
func (m *MockDatabaseI) Update(ctx context.Context, params *model.UpdateVideoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDatabaseIMockRecorder) Update(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabaseI)(nil).Update), ctx, params)
}
