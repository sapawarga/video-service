// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sapawarga/video-service/repository (interfaces: DatabaseI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/sapawarga/video-service/model"
	reflect "reflect"
)

// MockDatabaseI is a mock of DatabaseI interface
type MockDatabaseI struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseIMockRecorder
}

// MockDatabaseIMockRecorder is the mock recorder for MockDatabaseI
type MockDatabaseIMockRecorder struct {
	mock *MockDatabaseI
}

// NewMockDatabaseI creates a new mock instance
func NewMockDatabaseI(ctrl *gomock.Controller) *MockDatabaseI {
	mock := &MockDatabaseI{ctrl: ctrl}
	mock.recorder = &MockDatabaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseI) EXPECT() *MockDatabaseIMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockDatabaseI) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDatabaseIMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabaseI)(nil).Delete), arg0, arg1)
}

// GetCategoryNameByID mocks base method
func (m *MockDatabaseI) GetCategoryNameByID(arg0 context.Context, arg1 int64) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryNameByID", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryNameByID indicates an expected call of GetCategoryNameByID
func (mr *MockDatabaseIMockRecorder) GetCategoryNameByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryNameByID", reflect.TypeOf((*MockDatabaseI)(nil).GetCategoryNameByID), arg0, arg1)
}

// GetDetailVideo mocks base method
func (m *MockDatabaseI) GetDetailVideo(arg0 context.Context, arg1 int64) (*model.VideoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailVideo", arg0, arg1)
	ret0, _ := ret[0].(*model.VideoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailVideo indicates an expected call of GetDetailVideo
func (mr *MockDatabaseIMockRecorder) GetDetailVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailVideo", reflect.TypeOf((*MockDatabaseI)(nil).GetDetailVideo), arg0, arg1)
}

// GetListVideo mocks base method
func (m *MockDatabaseI) GetListVideo(arg0 context.Context, arg1 *model.GetListVideoRepoRequest) ([]*model.VideoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListVideo", arg0, arg1)
	ret0, _ := ret[0].([]*model.VideoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListVideo indicates an expected call of GetListVideo
func (mr *MockDatabaseIMockRecorder) GetListVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListVideo", reflect.TypeOf((*MockDatabaseI)(nil).GetListVideo), arg0, arg1)
}

// GetLocationNameByID mocks base method
func (m *MockDatabaseI) GetLocationNameByID(arg0 context.Context, arg1 int64) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationNameByID", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationNameByID indicates an expected call of GetLocationNameByID
func (mr *MockDatabaseIMockRecorder) GetLocationNameByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationNameByID", reflect.TypeOf((*MockDatabaseI)(nil).GetLocationNameByID), arg0, arg1)
}

// GetMetadataVideo mocks base method
func (m *MockDatabaseI) GetMetadataVideo(arg0 context.Context, arg1 *model.GetListVideoRepoRequest) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataVideo", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataVideo indicates an expected call of GetMetadataVideo
func (mr *MockDatabaseIMockRecorder) GetMetadataVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataVideo", reflect.TypeOf((*MockDatabaseI)(nil).GetMetadataVideo), arg0, arg1)
}

// GetVideoStatistic mocks base method
func (m *MockDatabaseI) GetVideoStatistic(arg0 context.Context) ([]*model.VideoStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoStatistic", arg0)
	ret0, _ := ret[0].([]*model.VideoStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoStatistic indicates an expected call of GetVideoStatistic
func (mr *MockDatabaseIMockRecorder) GetVideoStatistic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoStatistic", reflect.TypeOf((*MockDatabaseI)(nil).GetVideoStatistic), arg0)
}

// Insert mocks base method
func (m *MockDatabaseI) Insert(arg0 context.Context, arg1 *model.CreateVideoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockDatabaseIMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabaseI)(nil).Insert), arg0, arg1)
}

// Update mocks base method
func (m *MockDatabaseI) Update(arg0 context.Context, arg1 *model.UpdateVideoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDatabaseIMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabaseI)(nil).Update), arg0, arg1)
}
